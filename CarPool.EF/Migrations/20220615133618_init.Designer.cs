// <auto-generated />
using System;
using CarPool.EF.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarPool.EF.Migrations
{
    [DbContext(typeof(CarPoolDbContext))]
    [Migration("20220615133618_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("CarPool.EF.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Color")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LeaseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LeaseId")
                        .IsUnique();

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = 3,
                            LeaseId = 1,
                            LicenseNumber = "75327301",
                            ManufacturerId = 1
                        });
                });

            modelBuilder.Entity("CarPool.EF.Models.CarLease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CarLeases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            DriverId = 1,
                            EndDate = new DateTime(2025, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2022, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CarPool.EF.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LeaseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LeaseId")
                        .IsUnique();

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Nir",
                            LastName = "Karniel",
                            LeaseId = 1,
                            LicenseNumber = "48934955"
                        });
                });

            modelBuilder.Entity("CarPool.EF.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Tesla"
                        });
                });

            modelBuilder.Entity("CarPool.EF.Models.Car", b =>
                {
                    b.HasOne("CarPool.EF.Models.CarLease", "Lease")
                        .WithOne("Car")
                        .HasForeignKey("CarPool.EF.Models.Car", "LeaseId");

                    b.HasOne("CarPool.EF.Models.Manufacturer", "Manufacturer")
                        .WithMany("Cars")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lease");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("CarPool.EF.Models.Driver", b =>
                {
                    b.HasOne("CarPool.EF.Models.CarLease", "Lease")
                        .WithOne("Driver")
                        .HasForeignKey("CarPool.EF.Models.Driver", "LeaseId");

                    b.Navigation("Lease");
                });

            modelBuilder.Entity("CarPool.EF.Models.CarLease", b =>
                {
                    b.Navigation("Car");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("CarPool.EF.Models.Manufacturer", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
